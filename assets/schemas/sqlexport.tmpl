#!/bin/bash

_pwd=`dirname "$(readlink -f "$0")"`
drop_db_opt=-dropdb
dbname={database}
dbuser={user}
dbhost={host}
dbport={port}
logfile=$dbname.log
tmpfile=$dbname.tmp
sessionopts={sessionopts}
prependfile={prepended-sql}
appendedfile={appended-sql}
cluster_lvl_files="{prependfile} {files}"

function cmdError()
{
    error "Failed to run the following command: \n** $1"
}

function error()
{
    if [ "$1" != "" ]; then
        echo
        echo -e "** $1"
    fi 
    
    echo "** Process aborted!"
    echo
    exit 1
}

for pth in $(echo $PATH | sed 's/\:/ /g'); do
    if [ -e "$pth/psql" ]; then
        psql="$pth/psql"
    fi
done

if [ "$psql" == "" ]; then
    error "Failed to locate psql application!"
fi

psql_cmd="$psql -U $dbuser -h $dbhost -p $dbport -L $logfile -q"

export PGPASSFILE=pgpass.conf
cd $_pwd

if [ "$1" == "$drop_db_opt" ]; then
    echo
    echo "* WARNING: You're about to drop the entire database \"$dbname\"! This an irreversible action!"
    echo "* DO NOT proceed if you're trying to run this script on a production environment "
    echo "* or if you don't have a backup of the database to be dropped."
    echo
    read -p "> Do you still want to proceed? (yes/NO) " dropdb
    echo
    
    if [ "${dropdb,,}" != "yes" ]; then
        error ""
        echo "** Process aborted!"
        echo
        exit 1
    else
        $psql_cmd -c "DROP DATABASE IF EXISTS $dbname;"
        
        if [ $? -ne 0 ]; then
           cmdError "$psql_cmd -c \"DROP DATABASE $dbname;\""
        fi
    fi
fi

for file in $cluster_lvl_files; do    
    echo "* Running script $file..."
    $psql_cmd -f $file
    
    if [ $? -ne 0 ]; then
        cmdError "$psql_cmd -f $file"
    fi
done

for file in $(ls *.sql); do
    if [[ "${cluster_lvl_files[@]}" =~ "$file" ]] || [[ "$file" == "$sessionopts" ]]; then
        continue
    fi

    echo "* Running script $file..."
    cat $sessionopts $file > $tmpfile    
    $psql_cmd -d $dbname -f $tmpfile
        
    if [ $? -ne 0 ]; then      
        cmdError "$psql_cmd -d $dbname -f $tmpfile"
    fi
done

echo "* Process finished!"
echo
