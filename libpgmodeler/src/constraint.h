/*
# PostgreSQL Database Modeler (pgModeler)
# Sub-project: Core library (libpgmodeler)
# Class: Constraint
# Description: Implements the operations to manipulate table constraints
#              (primary keys, foreign key, unique and check).
# Creation date: 17/09/2006
#
# Copyright 2006-2013 - Raphael Ara√∫jo e Silva <rkhaotix@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# The complete text of GPLv3 is at LICENSE file on source code root directory.
# Also, you can get the complete GNU General Public License at <http://www.gnu.org/licenses/>
*/
#ifndef CONSTRAINT_H
#define CONSTRAINT_H

#include "tableobject.h"
#include "tablespace.h"
#include "column.h"

class Constraint: public TableObject{
 private:
  /// @details Type of the constraint (primary key, foreign key, unique or check)
  ConstraintType constr_type;

  /// @details Indicates if the constraint is deferrable (only for foreign key)
  bool deferrable;

  /// @details Deferral type for the constraint (only for foreign key)
  DeferralType deferral_type;

  /// @details Matching method used by the constraint (only for foreign key)
  MatchType match_type;

  /** @details This factor is used to indicate the space usage for the index generated by the constraint.
     Generally there is no need do fill this attribute but for more refined tuning this can be set.
     This is applicable only on primary keys and unique. */
  unsigned fill_factor;

  /** @details Actions taken when delete and update event occurs. This is applicable
     only for foreign keys */
  ActionType del_action, upd_action;

  /// @details Stores the columns that is referenced by the constraint (except for check constraints)
  vector<Column *> columns;

  /// @details Stores the referenced columns from the referenced table primary key
  vector<Column *> ref_columns;

  /// @details Stores the check expression (only for check constraints)
  QString check_expr;

  /// @details Stores the referenced table (only for foreign keys)
  BaseObject *ref_table;

  /// @details Formats the string for constraint columns to be used by the SchemaParser
  void setColumnsAttribute(unsigned col_type, unsigned def_type, bool inc_addedbyrel=false);

 public:
  /// @details Constats used to access the constraint columns
                        /** @details Access the source columns that means the columns that constrais
                           is applied (from the constraint's parent table) */
  static const unsigned SOURCE_COLS=0,

                        /** @details Access the referenced columns that means the columns from the
                           referenced table primary key (only for foreign keys) */
                        REFERENCED_COLS=1;

  Constraint(void);
  ~Constraint(void);

  /** @details Adds one column to the internal column list referenced by the
     constants SOURCE_COLS or REFERENCED_COLS */
  void addColumn(Column *column, unsigned col_type);

  /// @details Defines the constraint type
  void setConstraintType(ConstraintType constr_type);

  /** @details Defines the type of action on foreign keys (ON DELETE and ON UPDATE).
     If the parameter 'upd' is set, it will be configured the action on update
     otherwise the action on delete is configured. (only for foreign key) */
  void setActionType(ActionType action_type, bool upd);

  /// @details Defines the deferral type for the constraint (only for foreign key)
  void setDeferralType(DeferralType deferral_type);

  /// @details Defines whether the constraint is deferrable (only for foreign key)
  void setDeferrable(bool value);

  /// @details Defines the matching type used by the constraint (only for foreign key)
  void setMatchType(MatchType constr_type);

  /// @details Defines the checking expresion used by the constraint (only for check constraint)
  void setCheckExpression(const QString &expr);

  /// @details Defines the referenced table (only for foreign key)
  void setReferencedTable(BaseObject *tab_ref);

  /// @details Defines the tablespace used by the constraint (only for primary keys and unique)
  void setTablespace(Tablespace *tabspc);

  /// @details Defines the constraint fill factor (only for primary keys and unique)
  void setFillFactor(unsigned factor);

  /// @details Returns the constraint fill factor
  unsigned getFillFactor(void);

  /** @details Retuns the action type. Using upd = true is returned the ON UPDATE
     action otherwise the ON DELETE action is returned */
  ActionType getActionType(bool upd);

  /** @details Returns one column (using its index) from the internal constraint column lists.
     Use the constants SOURCE_COLS or REFERENCED_COLS to access the lists */
  Column *getColumn(unsigned col_idx, unsigned col_type);

  /** @details Returns one column (using its name) from the internal constraint column lists.
     Use the constants SOURCE_COLS or REFERENCED_COLS to access the lists */
  Column *getColumn(const QString &name, unsigned col_type);

  /** @details Returns the column count for one internal list.
     Use the constants SOURCE_COLS or REFERENCED_COLS to access the lists */
  unsigned getColumnCount(unsigned col_type);

  /** @details Removes one column from internal list using its name.
     Use the constants SOURCE_COLS or REFERENCED_COLS to access the lists */
  void removeColumn(const QString &name, unsigned col_type);

  /// @details Remove all columns from the internal lists
  void removeColumns(void);

  /// @details Returns the constraint type
  ConstraintType getConstraintType(void);

  /// @details Returns the check expression
  QString getCheckExpression(void);

  /// @details Returns the referenced table
  BaseObject *getReferencedTable(void);

  /// @details Returns the constraint's deferral type
  DeferralType getDeferralType(void);

  /// @details Indicates whether the constraint is deferrable
  bool isDeferrable(void);

  /** @details Returns whether the constraint references columns added
     by relationship. This method is used as auxiliary
     to control which constraints reference columns added by the
     relationship in order to avoid referece breaking due constants
     connections and disconnections of relationships */
  bool isReferRelationshipAddedColumn(void);

  /// @details Returns the matching type adopted by the constraint
  MatchType getMatchType(void);

  /** @details Returns the SQL / XML definition for the constraint.
     This method calls getCodeDefintion(unsigned, bool) with the
     second parameter as false */
  QString getCodeDefinition(unsigned def_type);

  /** @details Returns the SQL / XML definition for the constraint. The boolean parameter indicates
     whether the columns added by relationship must appear on the code definition */
  QString getCodeDefinition(unsigned def_type, bool inc_addedbyrel);

  /// @details Indicates whether the column exists on the specified internal column list
  bool isColumnExists(Column *column, unsigned col_type);

  friend class Tabela;
  friend class Relacionamento;
};

#endif
